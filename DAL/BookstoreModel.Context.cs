//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BookstoreDBEntities : DbContext
    {
        public BookstoreDBEntities()
            : base("name=BookstoreDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<author_table> author_table { get; set; }
        public virtual DbSet<book_table> book_table { get; set; }
        public virtual DbSet<bookstore_table> bookstore_table { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<author_book> author_book { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddNewAuthor(string authorName, Nullable<int> authorAge, string authorCountry)
        {
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorAgeParameter = authorAge.HasValue ?
                new ObjectParameter("AuthorAge", authorAge) :
                new ObjectParameter("AuthorAge", typeof(int));
    
            var authorCountryParameter = authorCountry != null ?
                new ObjectParameter("AuthorCountry", authorCountry) :
                new ObjectParameter("AuthorCountry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewAuthor", authorNameParameter, authorAgeParameter, authorCountryParameter);
        }
    
        public virtual int AddNewBook(string bookTitle, Nullable<int> bookPrice, string bookGenre)
        {
            var bookTitleParameter = bookTitle != null ?
                new ObjectParameter("BookTitle", bookTitle) :
                new ObjectParameter("BookTitle", typeof(string));
    
            var bookPriceParameter = bookPrice.HasValue ?
                new ObjectParameter("BookPrice", bookPrice) :
                new ObjectParameter("BookPrice", typeof(int));
    
            var bookGenreParameter = bookGenre != null ?
                new ObjectParameter("BookGenre", bookGenre) :
                new ObjectParameter("BookGenre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewBook", bookTitleParameter, bookPriceParameter, bookGenreParameter);
        }
    
        public virtual int AddNewBookstore(string bookstoreLocation, string bookstoreName)
        {
            var bookstoreLocationParameter = bookstoreLocation != null ?
                new ObjectParameter("BookstoreLocation", bookstoreLocation) :
                new ObjectParameter("BookstoreLocation", typeof(string));
    
            var bookstoreNameParameter = bookstoreName != null ?
                new ObjectParameter("BookstoreName", bookstoreName) :
                new ObjectParameter("BookstoreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewBookstore", bookstoreLocationParameter, bookstoreNameParameter);
        }
    
        public virtual int DeleteAuthorByID(Nullable<int> authorID)
        {
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAuthorByID", authorIDParameter);
        }
    
        public virtual int DeleteBookByID(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookByID", bookIDParameter);
        }
    
        public virtual int DeleteBookstoreByID(Nullable<int> bookstoreID)
        {
            var bookstoreIDParameter = bookstoreID.HasValue ?
                new ObjectParameter("BookstoreID", bookstoreID) :
                new ObjectParameter("BookstoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookstoreByID", bookstoreIDParameter);
        }
    
        public virtual ObjectResult<GetAuthorByID_Result> GetAuthorByID(Nullable<int> authorID)
        {
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuthorByID_Result>("GetAuthorByID", authorIDParameter);
        }
    
        public virtual ObjectResult<GetBookByID_Result> GetBookByID(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookByID_Result>("GetBookByID", bookIDParameter);
        }
    
        public virtual ObjectResult<GetBookstoreByID_Result> GetBookstoreByID(Nullable<int> bookstoreID)
        {
            var bookstoreIDParameter = bookstoreID.HasValue ?
                new ObjectParameter("BookstoreID", bookstoreID) :
                new ObjectParameter("BookstoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookstoreByID_Result>("GetBookstoreByID", bookstoreIDParameter);
        }
    
        public virtual int UpdateAuthor(string authorName, string authorCountry, Nullable<int> authorAge, Nullable<int> authorID)
        {
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorCountryParameter = authorCountry != null ?
                new ObjectParameter("AuthorCountry", authorCountry) :
                new ObjectParameter("AuthorCountry", typeof(string));
    
            var authorAgeParameter = authorAge.HasValue ?
                new ObjectParameter("AuthorAge", authorAge) :
                new ObjectParameter("AuthorAge", typeof(int));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAuthor", authorNameParameter, authorCountryParameter, authorAgeParameter, authorIDParameter);
        }
    
        public virtual int UpdateBook(string bookTitle, string bookGenre, Nullable<int> bookPrice, Nullable<int> bookID)
        {
            var bookTitleParameter = bookTitle != null ?
                new ObjectParameter("BookTitle", bookTitle) :
                new ObjectParameter("BookTitle", typeof(string));
    
            var bookGenreParameter = bookGenre != null ?
                new ObjectParameter("BookGenre", bookGenre) :
                new ObjectParameter("BookGenre", typeof(string));
    
            var bookPriceParameter = bookPrice.HasValue ?
                new ObjectParameter("BookPrice", bookPrice) :
                new ObjectParameter("BookPrice", typeof(int));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBook", bookTitleParameter, bookGenreParameter, bookPriceParameter, bookIDParameter);
        }
    
        public virtual int UpdateBookstore(string bookstoreLocation, string bookstoreName, Nullable<int> bookstoreID)
        {
            var bookstoreLocationParameter = bookstoreLocation != null ?
                new ObjectParameter("BookstoreLocation", bookstoreLocation) :
                new ObjectParameter("BookstoreLocation", typeof(string));
    
            var bookstoreNameParameter = bookstoreName != null ?
                new ObjectParameter("BookstoreName", bookstoreName) :
                new ObjectParameter("BookstoreName", typeof(string));
    
            var bookstoreIDParameter = bookstoreID.HasValue ?
                new ObjectParameter("BookstoreID", bookstoreID) :
                new ObjectParameter("BookstoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBookstore", bookstoreLocationParameter, bookstoreNameParameter, bookstoreIDParameter);
        }
    
        public virtual int spAddNewAuthor(string authorName, Nullable<byte> authorAge, string authorCountry)
        {
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorAgeParameter = authorAge.HasValue ?
                new ObjectParameter("AuthorAge", authorAge) :
                new ObjectParameter("AuthorAge", typeof(byte));
    
            var authorCountryParameter = authorCountry != null ?
                new ObjectParameter("AuthorCountry", authorCountry) :
                new ObjectParameter("AuthorCountry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddNewAuthor", authorNameParameter, authorAgeParameter, authorCountryParameter);
        }
    
        public virtual int spAddNewBook(string bookTitle, Nullable<int> bookPrice, string bookGenre, Nullable<int> bookstoreID, Nullable<int> authorID)
        {
            var bookTitleParameter = bookTitle != null ?
                new ObjectParameter("BookTitle", bookTitle) :
                new ObjectParameter("BookTitle", typeof(string));
    
            var bookPriceParameter = bookPrice.HasValue ?
                new ObjectParameter("BookPrice", bookPrice) :
                new ObjectParameter("BookPrice", typeof(int));
    
            var bookGenreParameter = bookGenre != null ?
                new ObjectParameter("BookGenre", bookGenre) :
                new ObjectParameter("BookGenre", typeof(string));
    
            var bookstoreIDParameter = bookstoreID.HasValue ?
                new ObjectParameter("BookstoreID", bookstoreID) :
                new ObjectParameter("BookstoreID", typeof(int));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddNewBook", bookTitleParameter, bookPriceParameter, bookGenreParameter, bookstoreIDParameter, authorIDParameter);
        }
    
        public virtual int spAddNewBookstore(string bookstoreLocation, string bookstoreName)
        {
            var bookstoreLocationParameter = bookstoreLocation != null ?
                new ObjectParameter("BookstoreLocation", bookstoreLocation) :
                new ObjectParameter("BookstoreLocation", typeof(string));
    
            var bookstoreNameParameter = bookstoreName != null ?
                new ObjectParameter("BookstoreName", bookstoreName) :
                new ObjectParameter("BookstoreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddNewBookstore", bookstoreLocationParameter, bookstoreNameParameter);
        }
    
        public virtual int spDeleteAuthorByID(Nullable<int> authorID)
        {
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAuthorByID", authorIDParameter);
        }
    
        public virtual int spDeleteBookByID(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteBookByID", bookIDParameter);
        }
    
        public virtual int spDeleteBookstoreByID(Nullable<int> bookstoreID)
        {
            var bookstoreIDParameter = bookstoreID.HasValue ?
                new ObjectParameter("BookstoreID", bookstoreID) :
                new ObjectParameter("BookstoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteBookstoreByID", bookstoreIDParameter);
        }
    
        public virtual ObjectResult<spGetAuthorByID_Result> spGetAuthorByID(Nullable<int> authorID)
        {
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAuthorByID_Result>("spGetAuthorByID", authorIDParameter);
        }
    
        public virtual ObjectResult<spGetBookByID_Result> spGetBookByID(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBookByID_Result>("spGetBookByID", bookIDParameter);
        }
    
        public virtual ObjectResult<spGetBookstoreByID_Result> spGetBookstoreByID(Nullable<int> bookstoreID)
        {
            var bookstoreIDParameter = bookstoreID.HasValue ?
                new ObjectParameter("BookstoreID", bookstoreID) :
                new ObjectParameter("BookstoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBookstoreByID_Result>("spGetBookstoreByID", bookstoreIDParameter);
        }
    
        public virtual int spUpdateAuthor(string authorName, string authorCountry, Nullable<int> authorAge, Nullable<int> authorID)
        {
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorCountryParameter = authorCountry != null ?
                new ObjectParameter("AuthorCountry", authorCountry) :
                new ObjectParameter("AuthorCountry", typeof(string));
    
            var authorAgeParameter = authorAge.HasValue ?
                new ObjectParameter("AuthorAge", authorAge) :
                new ObjectParameter("AuthorAge", typeof(int));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAuthor", authorNameParameter, authorCountryParameter, authorAgeParameter, authorIDParameter);
        }
    
        public virtual int spUpdateBook(string bookTitle, string bookGenre, Nullable<int> bookPrice, Nullable<int> bookID)
        {
            var bookTitleParameter = bookTitle != null ?
                new ObjectParameter("BookTitle", bookTitle) :
                new ObjectParameter("BookTitle", typeof(string));
    
            var bookGenreParameter = bookGenre != null ?
                new ObjectParameter("BookGenre", bookGenre) :
                new ObjectParameter("BookGenre", typeof(string));
    
            var bookPriceParameter = bookPrice.HasValue ?
                new ObjectParameter("BookPrice", bookPrice) :
                new ObjectParameter("BookPrice", typeof(int));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateBook", bookTitleParameter, bookGenreParameter, bookPriceParameter, bookIDParameter);
        }
    
        public virtual int spUpdateBookstore(string bookstoreLocation, string bookstoreName, Nullable<int> bookstoreID)
        {
            var bookstoreLocationParameter = bookstoreLocation != null ?
                new ObjectParameter("BookstoreLocation", bookstoreLocation) :
                new ObjectParameter("BookstoreLocation", typeof(string));
    
            var bookstoreNameParameter = bookstoreName != null ?
                new ObjectParameter("BookstoreName", bookstoreName) :
                new ObjectParameter("BookstoreName", typeof(string));
    
            var bookstoreIDParameter = bookstoreID.HasValue ?
                new ObjectParameter("BookstoreID", bookstoreID) :
                new ObjectParameter("BookstoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateBookstore", bookstoreLocationParameter, bookstoreNameParameter, bookstoreIDParameter);
        }
    }
}
